#!/bin/bash

# raise error if this script is not executed in this directory
if [[ ${0} != "./setup" && ${0} != "setup" ]]; then
  echo -e "FATAL: this script must be executed in dotfiles directory."
  echo -e "You need to change directories so you can execure this script by"
  echo -e "typing the following command."
  echo -e "=== EXECUTE BELOW ==="
  echo -e "$ bash setup.sh"
  echo -e "=== EXECUTE ABOVE ==="
  echo -e "Aborted."
  exit 1
fi

function link_file_or_directory() {
  if [ -L "${2}" ]; then
    if [ "$(readlink "$2")" != "$1" ]; then
      echo "INFO: \"$2\" already links other file \"$(readlink "$2")\". Unlinked."
    fi

    unlink "$2"
  elif [ -e "$2" ]; then
    echo "INFO: \"$2\" already exists. Moved this file as \"$2.backup_$(date '+%Y%m%d_%H%M%S')\"."
    mv $2 "$2.backup_$(date '+%Y%m%d_%H%M%S')"
  fi

  ln -s "${1}" "${2}"
}

function install_vim_bundle() {
  # install NeoBundle
  curl -LsS https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh > install.sh
  sh ./install.sh 1>/dev/null 2>/dev/null
  rm ./install.sh

  # install vim-plug
  if [ ! -e ~/.vim/autoload ]; then
    mkdir -p ~/.vim/autoload
  fi
  curl -LsS https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim > ~/.vim/autoload/plug.vim

  # install Vundle
  git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim 1>/dev/null 2>/dev/null
}

function install_vim_plugin() {
  if [ ! -e ~/.is_installed_vim_plugin ]; then
    vi
    echo "true" > ~/.is_installed_vim_plugin
  fi
}

function copy_gitconfig_local() {
  if [ ! -f $PWD/core/gitconfig.local ]; then
    cp $PWD/core/gitconfig.local.sample $PWD/core/gitconfig.local
  fi
}

function check_git_version() {
  # if Git version is 2.12.1, git_version is assigned to 2, and git_sub_version is assigned to 12.
  git_version=`git --version | egrep -o '[0-9]+(\.[0-9]+)?' | head -1 | egrep -o '^[0-9]*' | head -1`
  git_sub_version=`git --version | egrep -o '[0-9]+(\.[0-9]+)?' | head -1 | egrep -o '[0-9]*$' | head -1`
  recommended_git_version=2
  recommended_git_sub_version=8

  # if Git version is less than recommended Git version
  if [ "${git_version}" -lt "${recommended_git_version}" ] || ( [ "${git_version}" -eq "${recommended_git_version}" ] && [ "${git_sub_version}" -lt "${recommended_git_sub_version}" ] ); then
    echo -e "WARNING: Your Git version is less than ${recommended_git_version}.${recommended_git_sub_version}."
    echo -e "It is recommended to use Git ${recommended_git_version}.${recommended_git_sub_version} or higher.\n"
  fi
}

function make_dotfiles_path() {
  if [ ! -e $HOME/.dotpath ]; then
    touch $HOME/.dotpath
  fi

  echo -e "DOTPATH=$PWD" > $HOME/.dotpath
}

function reload_profile() {
  case "$(basename $(echo $SHELL))" in
    bash)
      source ~/.bash_profile
      ;;
    zsh)
      source ~/.zprofile
      ;;
  esac
}

function install_brew() {
  if [[ "${OSTYPE}" =~ "^darwin" ]]; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    sudo chown -R $(whoami) /usr/local/Cellar
    sudo chown -R $(whoami) /usr/local/Caskroom
  fi
}

function install_packages() {
  case "${OSTYPE}" in
    darwin*)
      brew bundle install --global --no-lock
      ;;
    linux*)
      package restore
      ;;
  esac
}

function install_anyenv() {
  # assumes anyenv has already been installed via Homebrew on macOS
  if [[ "${OSTYPE}" =~ "linux" ]]; then
    git clone https://github.com/anyenv/anyenv ~/.anyenv
  fi

  #exec $SHELL

  anyenv init
  anyenv install --init

  if ! type rbenv 1>/dev/null 2>/dev/null; then
    anyenv install rbenv
    #exec $SHELL
  fi

  if ! type pyenv 1>/dev/null 2>/dev/null; then
    anyenv install pyenv
    #exec $SHELL
  fi

  if ! type nodenv 1>/dev/null 2>/dev/null; then
    anyenv install nodenv
    #exec $SHELL
  fi
}

function install_ruby() {
  if [[ "$(ruby -v)" =~ "$(cat .ruby-version)" ]]; then
    return
  fi

  rbenv install $(cat .ruby-version)
  rbenv global $(cat .ruby-version)
  gem install bundler -v '1.16.5'
  bundle install
}

function install_python() {
  if [[ "$(python -V)" =~ "$(cat .python-version)" ]]; then
    return
  fi

  if [[ "${OSTYPE}" =~ "^darwin" ]]; then
    brew discard binutils
    pyenv install $(cat .python-version)
    brew get binutils
  else
    pyenv install $(cat .python-version)
  fi

  pyenv global $(cat .python-version)
  pip install pipenv
  pipenv install --system
}

function install_node() {
  if [[ "$(node -v)" =~ "$(cat .node-version)" ]]; then
    return
  fi

  nodenv install $(cat .node-version)
  nodenv global $(cat .node-version)
  npm install
}

function change_default_shell() {
  if [[ "$(basename $(echo $SHELL))" != "zsh" ]]; then
    if [[ "$(cat /etc/shells | grep -c $(which zsh))" = 0 ]]; then
      echo $(which zsh) | sudo tee -a /etc/shells
    fi

    chsh -s $(which zsh)
  fi
}

# copy gitconfig.local.sample to gitconfig.local
copy_gitconfig_local

# set DOTPATH
make_dotfiles_path

# link all files in core/ directory
for src_path in $PWD/core/*
do
  if [ -f ${src_path} ]; then
    dst_path=${HOME}/.`basename ${src_path}`
    link_file_or_directory ${src_path} ${dst_path}
  fi
done

# create .vim/ directory if not exists
if [ ! -e $HOME/.vim ]; then
  mkdir $HOME/.vim
fi

# create VS Code preference directory if not exists
# TODO: this depends on macOS, so support for Linux
if [ ! -e $HOME/Library/Application\ Support/Code/User ]; then
  mkdir -p $HOME/Library/Application\ Support/Code/User
fi

# link all files in shenvs, vim, git_template and bin directory
link_file_or_directory ${PWD}/shenvs     $HOME/.shenvs
link_file_or_directory $PWD/vim          $HOME/.vim/config
link_file_or_directory $PWD/git_template $HOME/.git_template
link_file_or_directory $PWD/bin/src      $HOME/.bin
link_file_or_directory $PWD/config       $HOME/.config

# link VS Code preferences
# TODO: this depends on macOS, so support for Linux
for src_path in ${PWD}/vscode/*
do
  if [ -f ${src_path} ]; then
    dst_path="$HOME/Library/Application Support/Code/User/`basename ${src_path}`"
    link_file_or_directory "${src_path}" "${dst_path}"
  fi
done

# Automator workflows
if [ ! -e $HOME/Library/Workflows ]; then
  link_file_or_directory $PWD/macos/Workflows $HOME/Library/Workflows
elif [ ! -L $HOME/Library/Workflows ] && [[ ${OSTYPE} =~ ^darwin.+ ]]; then
  echo "WARNING: Automator workflows already exist. Move them to another location."
fi

# unlink unnecessary files
unlink $HOME/.gitconfig.local.sample

install_vim_bundle
check_git_version
reload_profile
git refresh
install_vim_plugin

install_brew
install_packages
install_anyenv
install_ruby
install_python
install_node

change_default_shell

echo -e "Done! Check warnings if they exist."
exit 0
