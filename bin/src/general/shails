#!/bin/sh
# shellcheck disable=SC2004
# shellcheck disable=SC2059
# shellcheck disable=SC2129

set -eu

main() {
  file="$1"

  parse "$@"
  eval "set -- $REST"

  validate

  generate
}

validate() {
  if [ "$OVERWRITE" = 1 ]; then
    echo > "$file"
  elif [ -e "$file" ]; then
    echo "error: file $file already exists" >&2
    exit 1
  fi
}

generate() {
  touch "$file"
  shebang
  set_parameter
  main_function
  option_parser
  invoke_main
  # generate_options
}

shebang() {
  printf "#!/bin/sh\n" >> "$file"
  printf "# shellcheck disable=SC2004\n\n" >> "$file" # workaround
}

set_parameter() {
  printf "set -eu\n\n" >> "$file"
}

main_function() {
  printf "main() {\n}\n\n" >> "$file"
}

option_parser() {
  cat <<EOF >> "$file"
# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: $file [options]... [arguments]..." ''
  msg -- 'Options:'
  flag    FLAG    -f --flag                 -- "takes no arguments"
  param   PARAM   -p --param                -- "takes one argument"
  option  OPTION  -o --option on:"default"  -- "takes one optional argument"
  disp    :usage  -h --help
  disp    VERSION    --version
}
# @end

EOF

  # the reason a heredoc isn't used is to avoid being converted to a parser
  # when performing gengetoptions on this script
  printf "# @gengetoptions parser -i parser_definition parse\n" >> "$file"
  printf "#\n"                                                  >> "$file"
  printf "#     To generate the option parser, you can use:\n"  >> "$file"
  printf "#     $ gengetoptions embed --overwrite $file\n"      >> "$file"
  printf "#\n"                                                  >> "$file"
  printf "# @end\n\n"                                           >> "$file"
}

invoke_main() {
  printf "main \"\$@\"\n" >> "$file"
}

generate_options() {
  gengetoptions embed --overwrite "$file"
}

# @getoptions
parser_definition() {
  setup   REST help:usage -- "Usage: shails [options]... [arguments]..." ''
  msg -- 'Options:'
  flag    OVERWRITE -o --overwrite -- "overwrites an existing file"
  disp    :usage    -h --help
  disp    VERSION      --version
}
# @end

# @gengetoptions parser -i parser_definition parse
# Generated by getoptions (BEGIN)
# URL: https://github.com/ko1nksm/getoptions (v3.3.0)
OVERWRITE=''
REST=''
parse() {
  OPTIND=$(($#+1))
  while OPTARG= && [ $# -gt 0 ]; do
    case $1 in
      --?*=*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%%\=*}" "${OPTARG#*\=}"' ${1+'"$@"'}
        ;;
      --no-*|--without-*) unset OPTARG ;;
      -[oh]?*) OPTARG=$1; shift
        eval 'set -- "${OPTARG%"${OPTARG#??}"}" -"${OPTARG#??}"' ${1+'"$@"'}
        OPTARG= ;;
    esac
    case $1 in
      '-o'|'--overwrite')
        [ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break
        eval '[ ${OPTARG+x} ] &&:' && OPTARG='1' || OPTARG=''
        OVERWRITE="$OPTARG"
        ;;
      '-h'|'--help')
        usage
        exit 0 ;;
      '--version')
        echo "${VERSION}"
        exit 0 ;;
      --)
        shift
        while [ $# -gt 0 ]; do
          REST="${REST} \"\${$(($OPTIND-$#))}\""
          shift
        done
        break ;;
      [-]?*) set "unknown" "$1"; break ;;
      *)
        REST="${REST} \"\${$(($OPTIND-$#))}\""
    esac
    shift
  done
  [ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }
  case $1 in
    unknown) set "Unrecognized option: $2" "$@" ;;
    noarg) set "Does not allow an argument: $2" "$@" ;;
    required) set "Requires an argument: $2" "$@" ;;
    pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;
    notcmd) set "Not a command: $2" "$@" ;;
    *) set "Validation error ($1): $2" "$@"
  esac
  echo "$1" >&2
  exit 1
}
usage() {
cat<<'GETOPTIONSHERE'
Usage: shails [options]... [arguments]...

Options:
  -o, --overwrite             overwrites an existing file
  -h, --help
      --version
GETOPTIONSHERE
}
# Generated by getoptions (END)
# @end

main "$@"
