#!/bin/bash

BACKUP_PATH=$HOME/.backup
BACKUP_LIST=backup_list

# do nothing if backup path is already exists and is not a directory
if [ -e "${BACKUP_PATH}" ] && [ ! -d "${BACKUP_PATH}" ]; then
  echo -e "FATAL: \""${BACKUP_PATH}"\" is not a directory."
  exit 2
fi

# create a backup directory if it doesn't exists
if [ ! -e "${BACKUP_PATH}" ]; then
  mkdir "${BACKUP_PATH}"
fi

while read -d $'\0' file; do
  if [ ! -L "${file}" ]; then
    echo -e "WARNING: File \""${file}"\" which may not a backup file are found."
    echo -en "Do you mind me overwriting? [Y/n]: "
    exec < /dev/tty
    read confirm

    if [ $confirm != "Y" ] && [ $confirm != "Yes" ] && [ $confirm != "YES" ]; then
      echo
      echo -e "OK, the backup have been canceled."
      exit 1
    fi
  fi
done < <(find "${BACKUP_PATH}" -mindepth 1 -maxdepth 1 -print0)

# check if symlinks are safe (safe means already backed up by other method)
while read -d $'\0' file; do
  if [ -L "${file}" ] && [[ "$(readlink "${file}" | grep -cv "dotfiles")" -ne 0 ]]; then
    echo -e "WARNING: \""${file}"\" is a symlink, but the destination is not a dotfiles directory."
    ls -al "${file}"
    echo
  fi
done < <(find ~ -mindepth 1 -maxdepth 1 -print0)

while read line; do
  # trim comments
  line=$(echo "${line}" | awk '{ sub("#.*$", ""); print $0; }' | sed -e 's/[ \t]*$//')

  # skip empty line and comment line
  if [[ "${line}" = "" ]]; then
    continue
  fi

  if [ ! -L "$HOME/${line}" ] && [ -e "$HOME/${line}" ] && [ ! -e "${BACKUP_PATH}/${line}" ]; then
    ln -s "$HOME/${line}" "${BACKUP_PATH}/${line}"
  fi

  if [[ "$(readlink "${BACKUP_PATH}/${line}")" != "$HOME/${line}" ]] || [[ "$(diff "${BACKUP_PATH}/${line}" "$HOME/${line}")" != "" ]]; then
    echo "WARNING: \""$HOME/${line}"\" and \""${BACKUP_PATH}/${line}"\" are different."
  fi
done < $BACKUP_LIST

echo -e "Backed up successfully!"
echo -e "The following files or directories are not backed up. Check if these are really unnecessary."
echo
# change delimiter to "@" in sed because env $HOME includes "/"
ls -1ad $(echo -e "$(ls -1ad $(find $HOME -maxdepth 1 -mindepth 1 -not -type l) | sed -e "s@$HOME/@@g")\n$(cat "${BACKUP_LIST}")" | sort | uniq -u | sed "s@^@$HOME/@g") | sed -e "s@$HOME/@@g"

exit 0
