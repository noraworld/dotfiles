# Get the aliases
## General aliases
alias sudo='sudo ' # enable all aliases also at sudo mode
alias reload='source ~/.bash_profile'
alias restart='exec -l $SHELL'
alias hist='history | tac | less | peco'
alias histcpy='histcpy=`history | sed "s/^ *[0-9]* *//g" | tac | less | peco`; echo -n $histcpy | pbcopy; echo "Copied \`$histcpy\` to clipboard"'
alias again='eval $(history | sed "s/^ *[0-9]* *//g" | peco)'
alias gosearch='cd $(ghq root)/$(ghq list | peco)'
alias laravel='php artisan'
alias up='cd ..'
alias del='trash'

## Overridden aliases
### Some scripts may not work properly by overriding a existence command
alias grep='grep --color=auto'
alias vi='vim'

## Abbreviation aliases
alias d='show_directory_stack'
alias p='push_directory'
alias push='push_directory'
alias pop='pop_directory'
alias g='git'
alias ga='git a'
alias gc='git c'
alias gd='git d'
alias gs='git s'
alias l='lk'
alias ll='lk -l'
alias la='lk -a'
alias lal='lk -al'
alias lla='lk -la'
alias lt='lk --tree'
alias ltl='lk --tree -l'
alias lta='lk --tree -a'
alias ltal='lk --tree -al'
alias ltla='lk --tree -la'

## Deprecated aliases
alias rm='echo -e "rm command should not be used\ncommand ignored: rm"'

# Divide configs by OS
case "${OSTYPE}" in
  darwin*)
    if [ -e ~/.shenvs/macos.sh ]; then
      . ~/.shenvs/macos.sh
    fi
  ;;
  linux*)
    if [ -e ~/.shenvs/linux.sh ]; then
      . ~/.shenvs/linux.sh
    fi
  ;;
esac

# For development configs
if [ -e ~/.shenvs/development.sh ]; then
  . ~/.shenvs/development.sh
fi

# For production configs
if [ -e ~/.shenvs/production.sh ]; then
  . ~/.shenvs/production.sh
fi

# Load self-making commands path
if [ -e ~/.shenvs/bin.sh ]; then
  . ~/.shenvs/bin.sh
fi

# Git completion config
if [ -e /usr/local/etc/bash_completion.d/git-prompt.sh ]; then
  . /usr/local/etc/bash_completion.d/git-prompt.sh
fi

if [ -e /usr/local/etc/bash_completion.d/git-completion.bash ]; then
  . /usr/local/etc/bash_completion.d/git-completion.bash
fi

# Set DOTPATH
if [ -f ~/.dotpath ]; then
  . ~/.dotpath
fi

# Set colors to ls command
if [ -f ~/.dir_colors ]; then
  eval $(dircolors -b ~/.dir_colors)
fi

if [ -e /usr/local/etc/bash_completion.d/git-prompt.sh ]; then
  GIT_PS1_SHOWDIRTYSTATE=true
fi

ssh_ps1() {
  if [ -f /proc/$PPID/cmdline ]; then
    if [ "$(command cut -d : -f1 < "/proc/$PPID/cmdline")" = "sshd" ] && [[ $- == *i* ]]; then
      echo "\033[1;96m[SSH] \033[00m"
    else
      echo ""
    fi
  else
    echo ""
  fi
}

script_ps1() {
  case "${OSTYPE}" in
    darwin*)
      if [[ "$(ps -e -o pid,command | grep -E "^\s{0,}$PPID" | grep -v grep)" =~ "script" ]]; then
        echo "\033[1;92m🔴 RECORDING\033[00m"
      elif [[ "$(ps -e -o pid,command | grep -E "^\s{0,}$PPID" | grep -v grep)" =~ "login" ]]; then
        echo "\033[1;91m❌ NOT RECORDING!!!\033[00m"
      else
        echo "\033[1;93m❓ UNKNOWN\033[00m"
      fi
    ;;
    linux*)
      : # TODO (perhaps same as macOS, but not confirmed yet)
    ;;
  esac
}
SCRIPT_PS1=$(script_ps1)

# avoids scp failure
# scp fails when something is displayed to stdout at login
# returns 'true' if not scp
is_not_scp() {
  if [ ! -f /proc/$PPID/cmdline ]; then # if not Linux
    echo true
  elif [ -f /proc/$PPID/cmdline ] && [[ "$(cat /proc/$PPID/cmdline | sed 's/\x0//g')" =~ sshd:([[:blank:]]+.*)@notty ]]; then # if scp; use sed to get rid of null bytes
    echo false
  else
    echo true
  fi
}

# Show Git branch on prompt
if type __git_ps1 1>/dev/null 2>/dev/null; then
  PS1="$(script_ps1) $(ssh_ps1)\[\033[32m\]\h\[\033[33m\]:\[\033[35m\]\W\[\033[31m\]$(__git_ps1)\[\033[33m\] \$ \[\e[0m\]"
else
  PS1="$(script_ps1) $(ssh_ps1)\[\033[32m\]\h\[\033[33m\]:\[\033[35m\]\W\[\033[33m\] \$ \[\e[0m\]"
fi

# Restore directory stack when shell session starts or restarts
# Also see function store_directory_stack() in ./bin/src/override/_pushd
#
# CAUTION: This should be loaded after ./bash/bin.bash is loaded
if [[ -e $HOME/.directory_stack_store ]]; then
  if [[ $(dirs -v | wc -l) -eq 1 ]]; then
    while read line
    do
      # expand tilde into home directory’s path
      # somehow tilde is not expanded
      #
      # NOTE:
      #   use `|` instead of `/` as sed separator
      #   because `/` overlaps with path expression
      file=$(echo $line | sed -e "s|^~|$HOME|g")

      command pushd $file 1>/dev/null
    done << FILE
$(tac $HOME/.directory_stack_store || tail -r $HOME/.directory_stack_store)
FILE

    # delete directory of when shell session starts from stack
    command popd -0 1>/dev/null

    if "$(is_not_scp)"; then
      echo -e "Restored directory stack"
      show_directory_stack
      echo
    fi
  fi
else
  # echo -e "$HOME/.directory_stack_store is not found"
  :
fi

# Share the history for each tab or window
if ! [[ "$PROMPT_COMMAND" =~ "history -a;history -c;history -r" ]]; then
  PROMPT_COMMAND="history -a;history -c;history -r;$PROMPT_COMMAND"
fi

# Run specific command automatically when changing directories
if ! [[ "$PROMPT_COMMAND" =~ "autorun" ]]; then
  PROMPT_COMMAND="autorun;$PROMPT_COMMAND"
fi

autorun() {
  if [[ -n $AUTORUN_DIR ]] && [[ $AUTORUN_DIR != $PWD ]]; then
    echo -e ""
    echo -e "\033[1;92mDIRECTORY STACK:\033[00m"
    show_directory_stack
    echo -e ""
    echo -e "\033[1;92mFILES AND DIRECTORIES:\033[00m"
    ls
    echo ""
  fi

  AUTORUN_DIR="${PWD}"
}

if type starship 1>/dev/null 2>/dev/null; then
  eval "$(starship init bash)"
fi

# Load bash-preexec
[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh

# Refer to https://bearmini.hatenablog.com/entry/2016/02/16/222057. Thanks a lot!
_tn_timestamp=`echo $EPOCHREALTIME`
_tn_cmd=''
# _tn_caffeinate_pid=''
preexec() {
  _tn_timestamp=`echo $EPOCHREALTIME`
  _tn_cmd=$1

  while read line
  do
    deprecated_command=`echo "$line," | cut -d ',' -f 1`
    substitute_command=`echo "$line," | cut -d ',' -f 2`
    reason=`echo "$line," | cut -d ',' -f 3`
    if [[ $_tn_cmd =~ ^([[:blank:]]+.*)*$deprecated_command([[:blank:]]+.*)*$ ]] || [[ $_tn_cmd =~ ^([[:blank:]]+.*)*sudo([[:blank:]]+.*)*$deprecated_command([[:blank:]]+.*)*$ ]]; then
      if [[ "${substitute_command}" != "" ]]; then
        echo -e "\033[1;33mWARNING:\033[00m Command \`\033[1m$deprecated_command\033[00m' is deprecated. Use \`\033[1m$substitute_command\033[00m' command instead."
      elif [[ "${substitute_command}" = "" ]]; then
        echo -e "\033[1;33mWARNING:\033[00m Command \`\033[1m$deprecated_command\033[00m' is deprecated. It should not be used."
      else
        echo -e "Something went wrong!"
      fi

      if [[ "${reason}" != "" ]]; then
        echo "         Reason: $reason."
      fi
      echo -e "         Use \`\033[1mdep\033[00m' command to list all deprecated and substitute commands.\n"

      echo -e "\033[1;31mNOT RECOMMENDED:\033[00m \033[2mSend STOP signal (^Z) to continue anyway"
      echo -e "                 Do not forget to kill suspended sleep process after finishing command\033[00m"
      echo -e "\033[1;32mRECOMMENDED:\033[00m     \033[1mSend SIGINT signal (^C) to abort\033[00m\n"

      echo -en "Type signal: "

      sleep infinity
    fi
  done < $DOTPATH/DEPRECATED_COMMAND_LIST

  # caffeinate -d &
  # _tn_caffeinate_pid=`echo $!`
}
precmd() {
  now=`echo $EPOCHREALTIME`
  dur_float=`echo "scale=10; $now - $_tn_timestamp" | bc | sed 's/^\./0./'`
  dur_int=`echo $dur_float | sed s/\.[0-9,]*$//g`

  # This below must be executed before [^1]
  if [[ -d $SESSION_LOG_PATH ]] && [[ $(cat $SESSION_LOG_PATH/recording.log | wc -l) -ge $SESSION_LOG_SIZE ]]; then
    src_path=$SESSION_LOG_PATH/recording.log
    dst_path=$SESSION_LOG_PATH/typescript_$(date '+%Y-%m-%d_%H-%M-%S').log

    cp $src_path $dst_path
    echo > $src_path
    echo
    echo -e "INFO: $src_path exceeds $SESSION_LOG_SIZE lines. Moved to $dst_path automatically."
  fi

  # [^1]
  if [[ $_tn_cmd == "" ]]; then
    return
  fi

  is_enabled_notification=true
  while read line
  do
    if [[ $_tn_cmd =~ ^$line([[:blank:]]+.*)*$ ]]; then
      is_enabled_notification=false
    fi
  done < $DOTPATH/NOTIFICATION_SKIP_COMMAND_LIST

  # Do not use colorecho because it is a bit late
  ## echo average time:      0.00843399999999999
  ## colorecho average time: 0.17544710000000002
  echo
  echo -en "elapsed time: \033[1m$dur_float\033[00m seconds"

  if "${is_enabled_notification}"; then
    if [[ $dur_int -ge $NOTIFICATION_PERIOD_THRESHOLD ]]; then
      if type terminal-notifier 1>/dev/null 2>/dev/null; then
        # I prefer "Basso", "Frog", or "Pop" for notification sound
        # because I wouldn’t be surprised to hear these sounds suddenly.
        # But they may be too soft to notice.
        # In that case, "Default" or "Funk" may be good.
        terminal-notifier -message "Finished: $_tn_cmd" -sound $NOTIFICATION_SOUND -ignoreDnD

        # Tell the command is over by voice
        # Be careful the volume!
        # say "Finished: $_tn_cmd" -v Samantha
      else
        echo -en " \033[2m(terminal-notifier is not installed)\033[00m"
      fi

      echo -en " \033[2m(\033[3mecho '$_tn_cmd' >> $DOTPATH/NOTIFICATION_SKIP_COMMAND_LIST\033[00m \033[2mto disable notification for this command)\033[00m"
    fi
  else
    echo -en " \033[2m(notification is disabled for this command)\033[00m"
  fi

  echo
  _tn_cmd=''

  # kill -SIGINT $_tn_caffeinate_pid
  # _tn_caffeinate_pid=''
}

# Use direnv
# It should appear even after shell extensions that manipulate the prompt like git-prompt
if type direnv 1>/dev/null 2>/dev/null; then
  eval "$(direnv hook bash)"
fi
